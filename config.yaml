esphome:
  name: plantinator

esp8266:
  board: nodemcuv2
  restore_from_flash: true

preferences:
  flash_write_interval: 1min

logger:
  level: INFO
  esp8266_store_log_strings_in_flash: false

wifi:
  ssid: !secret ssid
  password: !secret password
  power_save_mode: NONE
  ap:
    ssid: "Plantinator"

api:

ota:
  - platform: esphome
    password: !secret ota_password

web_server:
  port: 80
  version: 1

number:
  - platform: template
    name: "pH sample interval"
    icon: "mdi:clipboard-text-clock-outline"
    id: ph_sample_interval
    min_value: 0.1
    max_value: 86400
    step: 0.1
    unit_of_measurement: "s"
    mode: box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Calibration: LOW (pH)"
    icon: "mdi:pan-down"
    id: ph_calibration_low_ph
    min_value: 0
    max_value: 10
    step: 0.1
    unit_of_measurement: "pH"
    mode: box
    device_class: ph
    optimistic: true
    restore_value: true

  - platform: template
    name: "Calibration: LOW (mV)"
    icon: "mdi:menu-up"
    id: ph_calibration_low_mv
    min_value: 0
    max_value: 5000
    step: 1
    unit_of_measurement: "mV"
    mode: box
    device_class: voltage
    optimistic: true
    restore_value: true

  - platform: template
    name: "Calibration: MID (pH)"
    icon: "mdi:circle-small"
    min_value: 0
    max_value: 10
    step: 0.1
    id: ph_calibration_mid_ph
    unit_of_measurement: "pH"
    mode: box
    device_class: ph
    optimistic: true
    restore_value: true

  - platform: template
    name: "Calibration: MID (mV)"
    icon: "mdi:square-small"
    min_value: 0
    max_value: 5000
    step: 1
    id: ph_calibration_mid_mv
    unit_of_measurement: "mV"
    mode: box
    device_class: voltage
    optimistic: true
    restore_value: true

  - platform: template
    name: "Calibration: HIGH (pH)"
    icon: "mdi:pan-up"
    min_value: 0
    max_value: 10
    step: 0.1
    id: ph_calibration_high_ph
    unit_of_measurement: "pH"
    mode: box
    device_class: ph
    optimistic: true
    restore_value: true

  - platform: template
    name: "Calibration: HIGH (mV)"
    icon: "mdi:menu-up"
    min_value: 0
    max_value: 5000
    step: 1
    id: ph_calibration_high_mv
    unit_of_measurement: "mV"
    mode: box
    device_class: voltage
    optimistic: true
    restore_value: true

  - platform: template
    name: "Pump speed"
    icon: "mdi:pump"
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    id: pump_speed
    unit_of_measurement: "%"
    mode: slider
    optimistic: true
    restore_value: true
    on_value:
      lambda: |-
        id(pump).set_level(x / 100.0);

  - platform: template
    name: "Pump spinup time"
    icon: "mdi:pump"
    min_value: 0
    max_value: 100000000
    step: 1
    id: pump_spinup_time
    unit_of_measurement: "ms"
    mode: box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Pump off time"
    icon: "mdi:water-pump-off"
    min_value: 0
    max_value: 86400
    step: 1
    id: pump_off_time
    unit_of_measurement: "s"
    mode: box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Pump on time"
    icon: "mdi:water-pump"
    min_value: 0
    max_value: 86400
    step: 1
    id: pump_on_time
    unit_of_measurement: "s"
    mode: box
    optimistic: true
    restore_value: true

switch:
  - id: "status"
    platform: gpio
    pin:
      number: GPIO2
      inverted: true
    name: "Status LED"
    icon: "mdi:led-off"

  - id: simultaneous_pump_and_ph_measure
    platform: template
    name: "Measure pH while pumping"
    icon: "mdi:clipboard-text-clock-outline"
    lambda: |-
      return id(global_allow_ph_measurement_during_pump);
    turn_on_action:
      - globals.set:
          id: global_allow_ph_measurement_during_pump
          value: 'true'
    turn_off_action:
      - globals.set:
          id: global_allow_ph_measurement_during_pump
          value: 'false'

output:
  - platform: esp8266_pwm
    id: "pump"
    pin: GPIO16
    frequency: 1000 Hz
    min_power: 0.0
    max_power: 1.0
    zero_means_zero: true


sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor

  - id: ph_sensor_voltage
    platform: adc
    pin: GPIO17
    name: "pH sensor voltage"
    update_interval: never
    state_class: "measurement"
    accuracy_decimals: 0
    unit_of_measurement: "mV"
    filters:
      - lambda: |-
          if(id(global_allow_ph_measurement_during_pump)){
            return x;
          }else{
            return id(global_current_mode) == 0 ? x : NAN;
          }
      - filter_out: nan
      - multiply: 1000
      - median:
          window_size: 20
          send_every: 10
          send_first_at: 10
    on_value:
      then:
        component.update: ph_sensor_ph

  - platform: template
    id: ph_sensor_ph
    name: "pH"
    update_interval: never
    accuracy_decimals: 1
    state_class: "measurement"
    device_class: "ph"
    unit_of_measurement: "pH"
    icon: "mdi:ph"
    lambda: |-
      float millivolts = id(ph_sensor_voltage).state;
      
      /* This only happens if we're out of bounds */
      if(millivolts > id(ph_calibration_low_mv).state ){
        return NAN; //Too acidic for our calibration
      }
      if(millivolts < id(ph_calibration_high_mv).state ){
        return NAN; //Too basic for our calibration
      }
      
      /* Acidic side */
      // This is just linear interpolation between two points.
      if(millivolts > id(ph_calibration_mid_mv).state ){
        float fraction = (millivolts - id(ph_calibration_low_mv).state) / ( id(ph_calibration_mid_mv).state - id(ph_calibration_low_mv).state);
        return esphome::lerp(fraction, id(ph_calibration_low_ph).state, id(ph_calibration_mid_ph).state);
      }
      
      /* Basic side */
      // This is just linear interpolation between two points.
      if(millivolts <= id(ph_calibration_mid_mv).state ){
        float fraction = (millivolts - id(ph_calibration_mid_mv).state) / ( id(ph_calibration_high_mv).state - id(ph_calibration_mid_mv).state);
        return esphome::lerp(fraction, id(ph_calibration_mid_ph).state, id(ph_calibration_high_ph).state);
      }
      
      // Typically unreachable if your buffer solutions have a wide range.
      return NAN;

globals:
  - id: global_current_mode
    type: int
    restore_value: no
    initial_value: '0'
  - id: global_last_mode_switch
    type: int
    restore_value: no
    initial_value: '0'
  - id: global_allow_ph_measurement_during_pump
    type: bool
    restore_value: yes
    initial_value: 'false'

button:
  - platform: template
    name: "Toggle pump"
    icon: "mdi:water-pump"
    on_press:
      - lambda: |-
          switch(id(global_current_mode)){
            case 0:
              id(global_last_mode_switch) = millis() - (id(pump_off_time).state * 1000);
              break;
            case 1:
              id(global_last_mode_switch) = millis() - id(pump_spinup_time).state;
              break;
            case 2:
              id(global_last_mode_switch) = millis() - (id(pump_on_time).state * 1000);
              break;
            default:
              break;
          }

  - platform: template
    name: "Measure pH now"
    icon: "mdi:ph"
    on_press:
      - lambda: |-
          for (int i = 0; i < 20; i++) {
            id(ph_sensor_voltage).update();
          }

interval:
  - interval: 1ms
    then:
      - lambda: |-
          int current_mode = id(global_current_mode);
          int last_mode_switch = id(global_last_mode_switch);
          int now = millis();

          static int last_ph_sample = 0;
          // We divide by 100 and not 1000 because we have a median filter that consumes 10 samples to present one.
          if((now - last_ph_sample) / 100 > id(ph_sample_interval).state){
            id(ph_sensor_voltage).update();
            last_ph_sample = now;
          }

          switch(current_mode){
            case 0: {
                  // We're not watering right now.
                  int seconds_passed = (now - last_mode_switch) / 1000;
                  if(seconds_passed >= id(pump_off_time).state){
                    if(id(pump_spinup_time).state > 0){
                      id(pump).set_level(1.0);
                      current_mode = 1;
                    }else{
                      id(pump).set_level(id(pump_speed).state / 100.0);
                      current_mode = 2;
                    }
                    last_mode_switch = now;
                  }
              }
              break;
            case 1: {
                  // We're spinning up the pump
                  int milliseconds_passed = now - last_mode_switch;
                  if(milliseconds_passed >= id(pump_spinup_time).state){
                    id(pump).set_level(id(pump_speed).state / 100.0);
                    last_mode_switch = now;
                    current_mode = 2;
                  }
              }
              break;
            case 2: {
                  // We are watering right now.
                  int seconds_passed = (now - last_mode_switch) / 1000;
                  if(seconds_passed >= id(pump_on_time).state){
                    id(pump).turn_off();
                    last_mode_switch = now;
                    current_mode = 0;
                  }
              }
              break;
            default:
              //Restore from unknown state
              last_mode_switch = 0;
              current_mode = 0;
              break;
          }

          id(global_current_mode) = current_mode;
          id(global_last_mode_switch) = last_mode_switch;